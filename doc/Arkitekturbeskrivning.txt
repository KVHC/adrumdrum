---------------Arkitekturbeskrivning adrumdrum----------------------------------

Projektet adrummdrum innehåller 7 stycken olika paket 


#----kvhc.adrumdrum----#
Paketet adrumdrum innehåller bara programmets main klass. 


	*----MainActivity----*
	Programmets startpunkt. Här görs allt som krävs för att appen ska starta




#----kvhc.gui----#
Här finns de klasser som används för att skapa ett GUI. Här finns det även 
klasser som används för att uppdatera och ändra i GUI:t


	
	*----GUIController----*
	Kontrollerar det mesta i programmet. Det är här allt som har med GUI:t att 
	göra instansieras. Det är den här klassen som reagerar på input från 
	användaren och ser till att rätt åtgärder utförs. Den här klassen skapar 
	också nya songs och laddar in dem i en player.


	*----ChannelButtonGUI----*
	En klass som ärver Button. GUI för att representera en knapp som man kan 
	klicka på för att få upp	kanalinställningar där man kan ändra volym och ljud.


	*----ChannelMuteButton----*
	En klass som ärver Button. Klickar man på knappen så ska kanalen byta
	mellan att vara mutad eller inte. Ska även innehålla en ikon som 
	reflekterar över hur hög volym kanalen har.


	*----GUIStepButton----*
	En klass som beskriver hur ett step ska se ut. Sköter aktivering och 	 
	avaktivering av ett step när den blir klickad på. Vid ett "långt" 
	klick visas en StepDialog 


	*----GUIUpdateObsever----*
	En Observer som updaterar GUI:t med information som skickas av player




#----kvhc.gui.dialogs----#
I paketet dialogs ligger alla dialoger som används av programmet. 


	*----ChannelDialog----*
	En dialog över olika kanalinställningar


	*----StepDialog----*
	En dialog som ändrar värden på ett Step. Startas av en GUIStepButton


	*----SavaSongDialog----*
	En dialog där användaren kan ange ett namn på låten som de vill spara

	*----LoadSongDialog----*
	En dialog där användaren kan se vilka låtar som finns sparade i en lista 
	och välja vilken låt som ska laddas genom att klicka på den. 




#----kvhc.model----#
Paketet player innehåller de klasser som styr spelaren och 


	*----Song----*
	Song används för att modellera antalet kanaler och hur många steg varje 
	kanal har. 


	*----Channel----*
	En Channel innehåller ett visst antal Steps. I en Channel finns det även
	variabler och metoder för att ändra kanalvolym, uppspelningsljud och 
	panning


	*----Step----*
	Ett Step är en modell för en ruta som man kan markera som aktiv eller inte. 
	Step innehåller också ett värde för hur hög ljuduppspelningen ska vara.


	*----Sound----*
	Ett sound är en "Wrapper klass" för ett ljud




#----kvhc.util----#
I paketet util finns de generell klasser som modellerar de verktyg som vi 
behöver för adrumdrum


	*----Player----*
	Player spelar upp en angiven Song. Player sköter vad som ska spelas upp 
	och när det ska göras. En Player har en SoundManager som sköter 
	uppspelningen av ljud


	*----SoundManager----*
	SoundManager sköter all uppspelning av ljud


	*----AndroidTimer----*
	En timer som kör en Runnable varje gång som "tiden går ut". Används av 
	player för att styra tiden mellan varje uppspelning av nästa steg.


	*----AssetManagerModel----*
	En klass för att hantera ljud. Klassen är en singelton.


	*----ISongLoader----*
	Ett interface för att ladda en låt. Används för att kunna spela upp 
	låten med olika bibliotek eller på olika sätt.


	*----ISongRenderer----*
	Ett interface för att rendera en song. 

	
	*----SoundPoolRenderer----*
	Implementerar ISongRenderer. Renderar ljud och spelar upp dem genom 
	att använda en SoundManager
	

#----kvhc.util.db----#
util.db innehåller de klasser som används för att skriva och läsa från databasen





